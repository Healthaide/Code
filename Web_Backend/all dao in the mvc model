1.
package cn.itcast.usermng.dao;

import java.io.InputStream;
import java.util.Properties;


public class DaoFactory {
	private static Properties props = null;
	static {
		// 加载配置文件内容到props对象中
		try {
			InputStream in = DaoFactory.class
					.getClassLoader().getResourceAsStream("dao.properties");
			props = new Properties();
			props.load(in);
		} catch(Exception e) {
			throw new RuntimeException(e);
		}
	}
	/**
	 * 返回一个具体UserDao的实现类对象
	 * @return
	 */
	public static UserDao getUserDao() {
		/**
		 * 给出一个配置文件，文件中给出UserDao接口的实现类名称！
		 * 我们这个方法，获取实现类的类名，通过反射完成创建对象！
		 */
		/*
		 * 得到dao实现类的名称
		 */
		String daoClassName = props.getProperty("cn.itcast.usermng.dao.UserDao");
		
		/*
		 * 通过反射来创建实现类的对象　
		 */
		try {
			Class clazz = Class.forName(daoClassName);
			return (UserDao)clazz.newInstance();
		} catch(Exception e) {
			throw new RuntimeException(e);
		}
	}
}


2.
package cn.itcast.usermng.dao;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import cn.itcast.usermng.domain.User;

/**
 * Database
 *
 */
public class JdbcUserDaoImpl implements UserDao {
	@Override
	public void addUser(User form) {
		Connection con = null;
		PreparedStatement pstmt = null;
		try {
			
			con = JdbcUtils.getConnection();
			
			String sql = "INSERT INTO t_users VALUES(?,?,?,?)";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, form.getUsername());
			pstmt.setString(2, form.getPassword());
			pstmt.setInt(3, form.getAge());
			pstmt.setString(4, form.getGender());
			pstmt.executeUpdate();
		} catch(Exception e) {
			throw new RuntimeException(e);
		} finally {
			try {
				if(pstmt != null) pstmt.close();
				if(con != null) con.close();
			} catch(SQLException e) {}
		}
	}

	@Override
	public User findByUsername(String username) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			
			con = JdbcUtils.getConnection();
			
			String sql = "SELECT * FROM t_users WHERE username=?";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, username);
			rs = pstmt.executeQuery();
		
			if(rs == null) {
				return null;
			}
			if(rs.next()) {
				//转换成User对象，并返回
				// ORM --> 对象关系映射！ hibernate!
				User user = new User();
				user.setUsername(rs.getString("username"));
				user.setPassword(rs.getString("password"));
				user.setAge(rs.getInt("age"));
				user.setGender(rs.getString("gender"));
				
				
				return user;
			} else {
				return null;
			}
		} catch(Exception e) {
			throw new RuntimeException(e);
		} finally {
			try {
				if(pstmt != null) pstmt.close();
				if(con != null) con.close();
			} catch(SQLException e) {}
		}
	}
}


3.
package cn.itcast.usermng.dao;

import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;


public class JdbcUtils {
	private static Properties props = null;
	
	// 只在JdbcUtils类被加载时执行一次！
	static {
		// 给props进行初始化，即加载dbconfig.properties文件到props对象中
		try {
			InputStream in = JdbcUtils.class.getClassLoader()
					.getResourceAsStream("dbconfig.properties");
			props = new Properties();
			props.load(in);
		} catch(IOException e) {
			throw new RuntimeException(e);
		}
		
		// 加载驱动类
		try {
			Class.forName(props.getProperty("driverClassName"));
		} catch (ClassNotFoundException e) {
			throw new RuntimeException(e);
		}
	}
	
	// 获取连接!
	public static Connection getConnection() throws SQLException {
		// 得到Connection
		return DriverManager.getConnection(props.getProperty("url"),
				props.getProperty("username"), 
				props.getProperty("password"));
	}
}


4.
package cn.itcast.usermng.dao;

import cn.itcast.usermng.domain.User;

/**
 * UserDao接口
 * 
 *
 */
public interface UserDao {
	public void addUser(User form);
	public User findByUsername(String username);
}



5.
package cn.itcast.usermng.dao;

import java.io.PrintWriter;
import java.io.Writer;

import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.SAXReader;
import org.dom4j.io.XMLWriter;

import cn.itcast.usermng.domain.User;

/**
 * 持久层（数据层）
 * 
 * 用来访问xml文件！
 * 

 */
public class UserDaoImpl implements UserDao {
	/**
	 * 插入对象到xml中
	 * @param form
	 */
	public void addUser(User form) {
		/*
		 * 1. 得到Document
		 * 2. 得到root元素
		 * 3. 要把User对象转换成Element元素
		 * 4. 把user元素插入到root元素中
		 * 5. 回写document
		 */
		try {
			/*
			 * 1. 得到Docuembnt
			 */
			// 创建解析器
			SAXReader reader = new SAXReader();
			// 调用读方法，得到Document
			Document doc = reader.read("D:/users.xml");
			
			/*
			 * 2. 得到根元素
			 */
			Element root = doc.getRootElement();
			/*
			 * 3. 完成添加元素，并返回添加的元素！
			 * 向root中添加一个名为user的元素！并返回这个元素
			 */
			Element userElement = root.addElement("user");
			// 设置userElement的属性！
			userElement.addAttribute("username", form.getUsername());
			userElement.addAttribute("password", form.getPassword());
			userElement.addAttribute("age", String.valueOf(form.getAge()));
			userElement.addAttribute("gender", form.getGender());
			
			
			// 创建目标输出流，它需要与xml文件绑定
			Writer out = new PrintWriter("D:/users.xml", "UTF-8");
			// 创建格式化器
			OutputFormat format = new OutputFormat("\t", true);
			format.setTrimText(true);//先干掉原来的空白(\t和换行和空格)！
			
			// 创建XMLWrtier
			XMLWriter writer = new XMLWriter(out, format);
			
			// 调用它的写方法，把document对象写到out流中。
			writer.write(doc);
			
			// 关闭流
			out.close();
			writer.close();
			
		} catch(Exception e) {
			// 把编译异常转换成运行异常！
			throw new RuntimeException(e);
		}
	}
	
	/**
	 * 按用户名进行查询
	 * @param username
	 * @return
	 */
	public User findByUsername(String username) {
		/*
		 * 1. 得到Docuemnt
		 * 2. 给出xpath表达式
		 * 3. 调用docuemnt的方法进行xpath查询，得到Element
		 * 4. 把Element转换成User对象，返回！
		 */
		try {
			/*
			 * 1. 得到Docuembnt
			 */
			// 创建解析器
			SAXReader reader = new SAXReader();
			// 调用读方法，得到Document
			Document doc = reader.read("D:/users.xml");
			
			/*
			 * 2. 准备xpath
			 *  //开头表示没有深的限制，可以在文档查询子元素、子元素的子元素！
			 *  []中放的叫谓语，其实就是查询条件
			 *  @username表示username属性，限定其必须等于方法参数username
			 */
			String xpath = "//user[@username='" + username + "']";
			/*
			 * 3. 调用document方法完成查询
			 */
			Element userEle = (Element)doc.selectSingleNode(xpath);
			if(userEle == null) {
				return null;
			}
			/*
			 * 4. 把元素转换成User类的对象，然后返回
			 */
			User user = new User();
			// 获取元素的username属性值，赋给对象的username属性
			user.setUsername(userEle.attributeValue("username"));
			user.setPassword(userEle.attributeValue("password"));
			user.setAge(Integer.parseInt(userEle.attributeValue("age")));
			user.setGender(userEle.attributeValue("gender"));
			
			return user;
		} catch(Exception e) {
			throw new RuntimeException(e);
		}
	}
}

